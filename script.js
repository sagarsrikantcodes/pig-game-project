/*
Pig Game Project:
There are 2 players in this game.
- Player-1
- Player-2
- Initially Player-1 is assumed to be an active player.
- The current scores of Player-1 and Player-2 are initially set to 0.
- Similarly, the total scores of Player-1 and Player-2 are initially set to 0.

High-Level Algorithm Design:
There are 3 possible click events in the Pig Game Project.


Possible actions of the user (Player-1 or Player-2)
- If the user rolls dice by clicking 'ðŸŽ² Roll dice' button. 
  - Generate the random dice roll 
  - Display the dice roll.
  - Check if the dice roll number is equal to 1
    - If the dice roll number == 1
      - Reset the current score of the active player to 0.
      - Switch the Player. 
    - Else
      - Add the dice roll number to the active player's current score.
      - Display the new current score of the active player. 

- If the user holds score by clicking 'ðŸ“¥ Hold' button.
  - Add the current score of the active player to the total score of the active player.
  - If the total score >= 100
    - current player wins
  - Else
    - switch player 

- If the user resets game by clicking 'ðŸ”„ New game' button. 
  - Set all the scores to 0.
  - Set Player-1 as starting/active player.

*/

'use strict';
let player1CurrentScore = Number(document.querySelector('p#current--0.current-score').textContent);
let player2CurrentScore = Number(document.querySelector('p#current--1.current-score').textContent);
let player1TotalScore = Number(document.querySelector('p#score--0.score').textContent);
let player2TotalScore = Number(document.querySelector('p#score--1.score').textContent);
let activePlayer = document.querySelector('section.player.player--0.player--active');
let dice = document.querySelector('img.dice');
dice.classList.add('hidden');
let gameActive = true; // Game is active by default
let lastDiceRoll;


// Function to generate a random number between 1 and 6 
function rollDice() {
  return Math.floor(Math.random() * 6) + 1;
}

// Function to update the dice image based on the random number generated by dice roll 
function updateDiceImage(roll) {
  const diceImage = document.querySelector('img.dice');
  // const roll = rollDice();
  diceImage.src = `dice-${roll}.png`; // Update the src with corresponding dice image
}

// Function to switch active player 
function switchActivePlayer() {
  console.log("Inside switch function");
  activePlayer.classList.remove('player--active');
  if (activePlayer === document.querySelector('section.player.player--0')) {
    console.log(true);
    activePlayer = document.querySelector('section.player.player--1');
  } else {
    activePlayer = document.querySelector('section.player.player--0');
  }
  activePlayer.classList.add('player--active');
}

// document.querySelector('button.btn.btn--roll').addEventListener('click', updateDiceImage);
// If the user rolls the dice
document.querySelector('button.btn.btn--roll').addEventListener('click', function() {
  if (!gameActive) return; // Do nothing if the game is not active.

  const roll = rollDice();
  lastDiceRoll = roll;
  console.log(roll);
  updateDiceImage(roll);
  dice.classList.remove('hidden');
  if (roll === 1) {
    console.log(activePlayer);
    console.log(document.querySelector('section.player.player--0.player--active'));
    if (activePlayer === document.querySelector('section.player.player--0.player--active')) {
      player1CurrentScore = 0;
      document.querySelector('p#current--0.current-score').textContent = String(player1CurrentScore);
    } else {
      player2CurrentScore = 0;
      document.querySelector('p#current--1.current-score').textContent = String(player2CurrentScore);
    }
    console.log("Switching active player ");
    switchActivePlayer();
    console.log("New active player is ");
    console.log(activePlayer);
  } else {
    if (activePlayer === document.querySelector('section.player.player--0.player--active')) {
      player1CurrentScore += roll;
      document.querySelector('p#current--0.current-score').textContent = String(player1CurrentScore);
    } else {
      player2CurrentScore += roll;
      document.querySelector('p#current--1.current-score').textContent = String(player2CurrentScore);
    }
  }
});

// If the user holds score
document.querySelector('button.btn.btn--hold').addEventListener('click', function() {
  if (!gameActive) return; // Do nothing if the game is not active

  if (activePlayer === document.querySelector('section.player.player--0.player--active')) {
    player1TotalScore += player1CurrentScore;
    document.querySelector('p#score--0.score').textContent = player1TotalScore;
    player1CurrentScore = 0;
    document.querySelector('p#current--0.current-score').textContent = String(player1CurrentScore);
  } else {
    player2TotalScore += player2CurrentScore;
    document.querySelector('p#score--1.score').textContent = player2TotalScore;
    player2CurrentScore = 0;
    document.querySelector('p#current--1.current-score').textContent = String(player2CurrentScore);
  }
  
  if (player1TotalScore >= 100 || player2TotalScore >= 100) {
    activePlayer.classList.add('player--winner');
    gameActive = false; // Set gameActive to false when the player wins
    const diceImage = document.querySelector('img.dice');
    diceImage.classList.add('hidden');
    if (player1TotalScore >= 100) {
      player1CurrentScore = lastDiceRoll;
      document.querySelector('p#current--0.current-score').textContent = String(player1CurrentScore);
    } 

    if (player2TotalScore >= 100) {
      player2CurrentScore = lastDiceRoll;
      document.querySelector('p#current--1.current-score').textContent = String(player2CurrentScore);
    }
  } else {
    switchActivePlayer();
  }
});

// If the user resets the game 
document.querySelector('button.btn.btn--new').addEventListener('click', function() {
  player1CurrentScore = 0;
  player1TotalScore = 0;
  player2CurrentScore = 0;
  player2TotalScore = 0;

  document.querySelector('p#current--0.current-score').textContent = String(player1CurrentScore);
  document.querySelector('p#score--0.score').textContent = String(player1TotalScore);
  document.querySelector('p#current--1.current-score').textContent = String(player2CurrentScore);
  document.querySelector('p#score--1.score').textContent = String(player2TotalScore);
  // Remove the 'player--winner' class from the activePlayer classList
  activePlayer.classList.remove('player--winner');

  if (activePlayer === document.querySelector('section.player.player--1.player--active')) {
    activePlayer.classList.remove('player--active');
    activePlayer = document.querySelector('section.player.player--0');
    activePlayer.classList.add('player--active');
  }

  const diceImage = document.querySelector('img.dice');
  diceImage.classList.add('hidden');
  gameActive = true; // Reset gameActive for a new game
  
});










